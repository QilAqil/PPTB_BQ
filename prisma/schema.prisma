// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(USER)
  isVerified    Boolean   @default(false)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sessions      Session[]
  news          News[]
  gallery       Gallery[]
  prayers       Prayer[]
  processedRegistrations Registration[] @relation("ProcessedBy")

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model News {
  id          String   @id @default(cuid())
  title       String
  content     String
  imageUrl    String?
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("news")
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  imageUrl    String
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("gallery")
}

model Registration {
  id                String             @id @default(cuid())
  fullName          String
  nik               String
  birthPlace        String
  birthDate         DateTime
  gender            String
  address           String
  phoneNumber       String
  parentName        String
  parentPhone       String
  motivation        String
  status            RegistrationStatus @default(PENDING)
  notes             String?
  processedBy       String?
  processedAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  processedByUser   User?              @relation("ProcessedBy", fields: [processedBy], references: [id])

  @@map("registrations")
}

model Prayer {
  id          String   @id @default(cuid())
  title       String
  arabicText  String   // Teks Arab do'a
  latinText   String   // Teks latin/transliterasi
  translation String   // Terjemahan dalam bahasa Indonesia
  category    String   // Kategori do'a (shalat, harian, khusus, dll)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("prayers")
}